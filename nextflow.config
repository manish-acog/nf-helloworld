// 0: Manifest
manifest {
    name = 'dsl2-template-nf'
    description = 'Lifebit Omics workflow'
    mainScript = 'main.nf'
    version = "1.0.0"
}

// 1: Parameters 
includeConfig 'conf/customised_pipeline_resources.config'
includeConfig 'conf/containers/quay.config'

// NOTE: 
// Initialise the values of the params to the preferred default value or to false
params {
    raci_owner = "Lifebit"
    domain_keywords = "Omics"
    unique_identifier = "abcd123"

    // define your input options
    // EDIT HERE
    reference_data_bucket = "s3://lifebit-featured-datasets"
    input = false

    // TOO HERE

    // define your output options
    outdir = 'results'
    tracedir = "${params.outdir}/pipeline_info"
    report_dir = "/opt/bin"
    obtain_pipeline_metadata = false

    // when set to true, prints help and exits
    help = false

    // execution related defaults
    config = 'conf/executors/standard.config'
    echo = false
    executor = false

    // google-lifesciences
    gls_bootDiskSize = '50.GB'
    gls_preemptible = true
    zone = 'us-east1-b'
    network = 'default'
    subnetwork = 'default'

    // AWS batch
    aws_region = 'eu-west-1'
    aws_batch_default_queue = "optimal-instance-1tb-ami-on-demand-queue"
    aws_batch_cli_path = '/home/ec2-user/miniconda/bin/aws'
    aws_batch_fetch_instance_type = true
    aws_batch_max_parallel_transfers = 2
    aws_batch_volumes = '/home/ec2-user/.aws:/root/.aws'
}

// 2: Profiles
profiles {
    standard { includeConfig params.config }
    awsbatch { includeConfig 'conf/executors/awsbatch.config' }
    local { includeConfig 'conf/executors/local.config' }
    docker { docker.enabled = true }
    eu_west_1 { includeConfig 'conf/cloud-region/eu_west_1.config' }
    eu_west_2 { includeConfig 'conf/cloud-region/eu_west_2.config' }
    test_ci_input { includeConfig 'conf/tests/ci/test_ci_input.config' }
    test_full_input { includeConfig 'conf/tests/full/test_full_input.config' }
    singularity { includeConfig 'conf/executors/singularity.config' }
    dockerhub { includeConfig 'conf/containers/dockerhub.config' }
    quay { includeConfig 'conf/containers/quay.config' }
    ecr { includeConfig 'conf/containers/ecr.config' }

}

// 3: Process
includeConfig 'conf/data/data.config' // Loads in data
includeConfig 'conf/resources.config' // Loads in resources

// Define the containers used for your process
process {
    queue = params.aws_batch_default_queue
    container = params.main_container

    withLabel: bash_code {
        container = params.main_container
    }
 // EDIT HERE & add container in /conf/containers/quay.config
    withLabel: process1 {
        container = params.process1_container
        containerOptions = '-v /etc/ssl:/etc/ssl -v /usr/local/share/ca-certificates:/usr/local/share/ca-certificates'
    }

 // TOO HERE
}

// 4: Executor
// Do not remove this section! Required for running with different executors using --executor parameter
executor {
    name = params.executor
    queueSize = params.queueSize
}

// 5. Nextflow Extras
// Nextflow timeline, report and trace reports
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    overwrite = true
    fields = 'task_id,native_id,process,name,tag,status,exit,cpus,%cpu,memory,%mem,rss,vmem,peak_rss,peak_rss,container'
    file = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
